# Move Development Guidelines

## Core Principles

1. Testing Philosophy
- Test from user perspective only
- Use public interfaces exclusively
- Simulate real user interactions
- Verify through public views
- Test deployed contract behavior

2. Code Quality
- Write clear, focused functions
- Use explicit visibility modifiers
- Follow Move naming conventions
- Document public interfaces
- Maintain backwards compatibility

3. Security First
- Validate all inputs
- Use explicit error codes
- Follow Checks-Effects-Interactions
- Implement proper access control
- Document security assumptions

## Development Workflow

### 1. Project Setup
```bash
# Create new project
movement move new <project_name>

# Build project
movement move build

# Run tests
movement move test
movement move test --filter <test_name>
movement move test --coverage
```

### 2. Code Structure
```move
module example::contract {
    // 1. Uses (framework first, then custom)
    use std::string;
    use aptos_framework::account;
    
    // 2. Error constants
    const EINVALID_INPUT: u64 = 1;
    
    // 3. Other constants
    const MAX_AMOUNT: u64 = 1000;
    
    // 4. Structs
    struct Config has key { ... }
    
    // 5. Events
    struct UpdateEvent has drop, store { ... }
    
    // 6. Public/Entry functions
    public entry fun initialize(...) { ... }
    
    // 7. View functions
    #[view]
    public fun get_state(): u64 { ... }
    
    // 8. Internal functions
    fun validate_input(...) { ... }
}
```

### 3. Testing Structure
```move
#[test_only]
module example::contract_tests {
    use example::contract;
    
    #[test]
    fun test_public_workflow() {
        // Setup
        let user = create_test_account();
        
        // Execute through public interface
        contract::initialize(&user);
        
        // Verify through public views
        assert!(contract::get_state() == expected);
    }
}
```

### 4. Deployment Process
```bash
# Deploy to testnet
movement move publish \
    --profile testnet \
    --included-artifacts sparse \
    --named-addresses contract=0x123...

# Verify deployment
movement move verify

# Monitor events
movement move events \
    --profile mainnet \
    --event-key <key>
```

## Technical Guidelines

### 1. Numeric Safety
```move
// Constants
const MAX_U64: u64 = 18446744073709551615;
const BPS_DENOMINATOR: u64 = 10000;  // 100% = 10000
const OCTA: u64 = 100000000;  // 10^8 scaling

// Overflow checks
assert!(a <= MAX_U64 - b, EOVERFLOW);
assert!(a == 0 || b <= MAX_U64 / a, EOVERFLOW);
assert!(a >= b, EUNDERFLOW);
```

### 2. Token Handling
```move
// Correct token creation
token::create_from_account(
    creator,
    name,
    description,
    uri,
    royalty,
    collection
);

// Proper object handling
let obj = object::convert(config.collection);
```

### 3. Event Handling
```move
// Event definition
struct UpdateEvent has drop, store {
    old_value: u64,
    new_value: u64,
    timestamp: u64,
}

// Event emission
event::emit_event(
    &mut events,
    UpdateEvent { old_value, new_value, timestamp }
);
```

## Best Practices

### 1. Code Organization
- Group related functionality
- Separate concerns
- Use consistent structure
- Follow Move patterns

### 2. Error Handling
- Use descriptive error codes
- Validate early
- Handle edge cases
- Document error conditions

### 3. Performance
- Minimize storage access
- Use efficient data structures
- Consider gas costs
- Document tradeoffs

### 4. Documentation
- Document public interfaces
- Explain error conditions
- Describe event emissions
- Provide usage examples

### 5. Testing
- Test public interfaces
- Verify error handling
- Check event emissions
- Validate state transitions

### 6. Security
- Validate all inputs
- Check permissions
- Handle edge cases
- Document risks

## Quality Standards

1. Code Quality
- Comprehensive tests
- Clear documentation
- Consistent style
- Proper error handling

2. Maintenance
- Keep interfaces stable
- Document changes
- Track dependencies
- Monitor usage

3. Deployment
- Test in testnet
- Verify capabilities
- Monitor events
- Have rollback plans
